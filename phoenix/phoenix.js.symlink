var hyper = ['shift', 'ctrl', 'cmd', 'alt'];


lookOfDisapproval="ಠ_ಠ";
rageOfDongers="ヽ༼ ಠ益ಠ ༽ﾉ";
whyLook="ლ(ಠ_ಠლ)";

function getURL(url, callback) {
    api.runCommand("/usr/bin/curl", [url], callback);
}

function frameEquals(frame, frame2) {
    return (
        frame.y == frame2.y &&
        frame.x == frame2.x &&
        frame.height == frame2.height &&
        frame.width == frame2.width
    );
}

function toLeft(fillCols, maxCols, screen, win) {
    var win = win || Window.focusedWindow();
    var orgFrame = win.frame();
    var screen = (screen || win.screen());
    var screenFrame = screen.frameWithoutDockOrMenu();

    var frame = _.clone(screenFrame);
    frame.width = screenFrame.width * (fillCols / maxCols);

    if (frameEquals(frame, orgFrame)) {
        toRight(fillCols, maxCols, screen.previousScreen());
    } else {
        win.setFrame(frame);
    }
}

function toRight(fillCols, maxCols, screen, win) {
    var win = win || Window.focusedWindow();
    var orgFrame = win.frame();
    var screen = (screen || win.screen());
    var screenFrame = screen.frameWithoutDockOrMenu();

    var frame = _.clone(screenFrame);
    frame.width = screenFrame.width * (fillCols / maxCols);
    frame.x = screenFrame.x + frame.width;

    if (frameEquals(frame, orgFrame)) {
        toLeft(fillCols, maxCols, screen.nextScreen());
    } else {
        win.setFrame(frame);
    }
}

function clamp(val, min, max) {
    return Math.max(min, Math.min(max, val));
}

function grow(size) {
    var win = Window.focusedWindow();
    var frame = win.frame();
    var screenFrame = win.screen().frameWithoutDockOrMenu();
    size = screenFrame.width * size

    // Left
    if (screenFrame.x == frame.x && screenFrame.x + screenFrame.width != frame.x + frame.width ) {
        frame.width = Math.min(screenFrame.width - frame.x + size/2, frame.width + size)

    // Right
    } else {
        frame.x = Math.max(frame.x - size/2, screenFrame.x)
        frame.width = screenFrame.width - frame.x + screenFrame.x;
    }

    win.setFrame(frame);
}

function fullScreen(screen, win) {
    var win = win || Window.focusedWindow();
    var screenFrame = (screen || win.screen()).frameWithoutDockOrMenu();
    win.setFrame(screenFrame);
}

function throwNext() {
    var win = Window.focusedWindow();
    fullScreen(win.screen().nextScreen())
}

function windowThink() {
    var frame = Window.focusedWindow().screen().frameWithoutDockOrMenu();
    var winf = Window.focusedWindow().frame();
    api.alert(JSON.stringify({screen: frame, win: winf}));
}

App.allWithTitleOrBundleIdentifier = function( title, bundleIdentifier ) {

  return _(this.runningApps()).filter( function( app ) {
    if ((title && app.title() === title) || (bundleIdentifier && app.bundleIdentifier() === bundleIdentifier)) {
      return true;
    }
  });
};


App.focusOrStart = function ( title, bundleIdentifier, windowTitle) {
  var apps = App.allWithTitleOrBundleIdentifier( title, bundleIdentifier );

  if (_.isEmpty(apps) && title) {
    //api.alert(rageOfDongers + " Starting " + title);
    api.launch(title);
    return;
  }

  var windows = _.chain(apps)
    .map(function(x) {  return x.allWindows(); })
    .flatten()
    .value();

  if (windows.length > 1) {
      windows = _(windows).reject(function(win) { return win.isWindowMinimized();});
      if (_.isEmpty(windows)) {
        api.alert(whyLook + " All windows minimized for " + title);
        return;
      }
  } else if (windows.length == 0) {
    api.launch(title);
  }

  windows.forEach(function(win) {
    if (windowTitle && win.title().indexOf(windowTitle) == -1) {
        return;
    }

    if (win.isWindowMinimized()) {
        win.unMinimize()
    }

    win.focusWindow();
  });
};

App.startIfNotStarted = function ( titles ) {
    _.each(titles, function (title) {
        var apps = App.allWithTitleOrBundleIdentifier( title );
        if (_.isEmpty(apps) && title) {
            api.launch(title);
        }
    })
}

// Alignment
api.bind('left', hyper, function() { toLeft(1, 2); });
api.bind('right', hyper, function() { toRight(1, 2); });
api.bind('m', hyper, function() { fullScreen(); });
api.bind('up', hyper, function() { grow(0.1); });
api.bind('down', hyper, function() { grow(-0.1); });
api.bind('0', hyper, function() { throwNext(); });
api.bind('pad0', hyper, function() { throwNext(); });

// Applications
api.bind('q', hyper, function() { App.focusOrStart('HipChat'); });
api.bind('w', hyper, function() { App.focusOrStart('Spotify'); });

api.bind('a', hyper, function() { App.focusOrStart(undefined, 'com.google.Chrome'); });
api.bind('x', hyper, function() { App.focusOrStart(undefined, 'com.google.Chrome.canary'); });
api.bind('1', hyper, function() { App.focusOrStart(undefined, 'com.google.Chrome', 'Developer Tools'); });
api.bind('s', hyper, function() { App.focusOrStart('Sublime Text'); });
api.bind('d', hyper, function() { App.focusOrStart('iTerm'); });

api.bind('f', hyper, function() { App.focusOrStart('Finder'); });

api.bind('z', hyper, function() { App.focusOrStart('Twitter'); });

////////////////////////////////////
// ODDMODE
////////////////////////////////////
var oddMode = true;

api.bind('4', hyper, function() {
    oddMode = !oddMode;
    api.alert("OddMode: " + (oddMode ? 'on' : 'off'));
});

api.bind('3', hyper, function() {
    api.alert('layout');



});


api.bind('2', hyper, function() {
    if (!oddMode)
        return;

    getURL('vecka.nu', function(html) {
        var regex = /<time datetime=".*">(\d{1,2})<\/time>/;
        matches = html.match(regex);
        if (matches && matches[1]) {
            api.alert(matches[1]);
        }
    });
});

api.bind('r', hyper, function() { api.reload() });

